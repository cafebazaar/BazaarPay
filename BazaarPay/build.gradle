plugins {
    id 'com.android.library'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-parcelize'
    id 'androidx.navigation.safeargs.kotlin'
    id 'kotlin-kapt'
    id 'maven-publish'
}

apply from: "$rootDir/configs/versions.gradle"

final GROUP_ID = "ir.cafebazaar"
final VERSION_NAME = "1.0.0-alpha01"
final VERSION_CODE = 1

android {
    compileSdk build.compileSdk

    defaultConfig {
        minSdk build.minSdk
        targetSdk build.targetSdk
        versionCode VERSION_CODE
        versionName VERSION_NAME
        multiDexEnabled true

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        buildTypes.each {
            it.buildConfigField 'String', 'VERSION', '"beta"'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        viewBinding true
    }
}

dependencies {

    implementation "androidx.core:core-ktx:$library.core"
    implementation "androidx.appcompat:appcompat:$library.appcompat"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$library.lifecycle"
    implementation "com.google.android.material:material:$library.material"
    implementation "androidx.constraintlayout:constraintlayout:$library.constraintlayout"
    implementation "androidx.navigation:navigation-fragment-ktx:$library.navigation"
    implementation "androidx.navigation:navigation-ui-ktx:$library.navigation"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$library.lifecycle"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$library.kotlinx"
    implementation "com.google.android.gms:play-services-base:$library.playServicesBase"
    implementation "com.google.android.gms:play-services-auth-api-phone:$library.playServicesAuthApiPhone"
    implementation "com.google.android.gms:play-services-auth:$library.playServicesAuth"
    implementation "com.github.hbazargan:DynamicRestClient:$library.dynamicRestClient"
    implementation "androidx.multidex:multidex:$library.multidex"
    implementation "com.github.bumptech.glide:glide:$library.glide"
    implementation "androidx.recyclerview:recyclerview:$library.recyclerview"
    implementation "com.tbuonomo:dotsindicator:$library.dotsindicator"
    kapt "com.github.bumptech.glide:compiler:$library.glide"
}

publishing {
    publications {
        aar(MavenPublication) {
            groupId = GROUP_ID
            artifactId = project.getName()
            version = VERSION_NAME
            // Tell maven to prepare the generated "*.aar" file for publishing
            artifact("$buildDir/outputs/aar/${project.getName()}-release.aar")
            pom.withXml {
                // for dependencies and exclusions
                def dependenciesNode = asNode().appendNode('dependencies')
                def configurationNames = ["implementation", "api", "runtimeOnly"]
                configurationNames.each { confName ->
                    configurations[confName].allDependencies.each {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                        if (it.excludeRules.size() > 0) {
                            def exclusionsNode = dependencyNode.appendNode('exclusions')
                            it.excludeRules.each { rule ->
                                def exclusionNode = exclusionsNode.appendNode('exclusion')
                                exclusionNode.appendNode('groupId', rule.group)
                                exclusionNode.appendNode('artifactId', rule.module)
                            }
                        }
                    }
                }
            }
        }
    }
}

project.afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                from components.release
            }
        }
    }
}